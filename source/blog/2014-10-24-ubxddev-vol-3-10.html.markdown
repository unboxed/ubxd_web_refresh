---
layout: "blog_article"
weekly_roundup: true
date: "2014-10-24 13:30:00 UTC"
published: true
title: "UBXDDEV Vol. 3.10"
author: "Murray Steele"
tags:
  - Rails
---

## Breaking things small - [Patrick V](http://www.unboxedconsulting.com/people/patrick-vine/)

I've been spending some time thinking about breaking things small.  Micro
services are one of the buzzes at the moment for doing that.  As a result
getting some feedback on people's experiences and learning while doing a
micro service implementation is really useful.  One good example of that
sharing is
http://techblog.realestate.com.au/a-microservices-implementation-retrospect
ive/.

The one of the drivers for me thinking about breaking things small is
articulated nicely in Martin Fowler's [recent bliki on sacrificial
architectures](http://martinfowler.com/bliki/SacrificialArchitecture.html).  Assuming
longevity of the code base / solution - how will you easily replace what
you're doing now with something new in 5 years time?

## Interview about the mobile web - [Neil](http://www.unboxedconsulting.com/people/neil-van-beinum)

http://www.infoq.com/interviews/andrew-betts-mobile-web

The Financial Times mobile web app is regarded as one of the best examples of how HTML5 can be used to create a native mobile app experience. In this interview, director Andrew Betts outlines their approach and some of the challenges that they face including older browsers, multiple devices and competing with native UIs.

## Geometrical Art in JS - [Neil](http://www.unboxedconsulting.com/people/neil-van-beinum)

http://vart.institute/mondrian/

Fun article about the process of creating geometrical art through Javascript. The author starts with a hard-coded design and then builds up a recursive program to mimic a famous piece by Mondrian, randomly generated each time.

## Surviving Big Rewrites - [Murray](http://www.unboxedconsulting.com/people/murray-steele)

http://onstartups.com/tabid/3339/bid/97052/How-To-Survive-a-Ground-Up-Rewrite-Without-Losing-Your-Sanity.aspx

Our natural instinct as developers when encountering old code is often "this is terrible, we must re-write".  Harking back to our [boring developers links from a couple of weeks back](http://www.unboxedconsulting.com/blog/ubxddev-vol-38) we often overcome that instinct by thinking about how much work a full rewrite will be and how much we've forgotten that is encoded in the old software.  Sometimes though weighing up the pros and cons it might just be that a rewrite might be the correct approach.  This article gives some advice on how to approach a rewrite, and how to survive.

## Creating a type style guide - [Neil](http://www.unboxedconsulting.com/people/neil-van-beinum)

http://blog.typekit.com/2014/10/22/creating-a-type-style-guide/

Susan Robertson outlines her approach to refactoring the typography styling of a website to make it more reusable. She starts by creating an inventory of existing styles (using a neat browser add-on that produces JSON reports) and making a test page to compare the type side-by-side to see similarities. She then creates mixins for those types and gradually adds them to individual pages of the site, modifying as needed. The resulting type style guide lists each type element along with how to use it.
